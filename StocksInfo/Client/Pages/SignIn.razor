@page "/signIn"
@using Blazored.LocalStorage
@using Client.Providers
@inherits StocksBase

<h3>Sign In</h3>

<h4>You can test it with the example account below</h4>

<p><b>Username: </b>user@example.com</p>
<p><b>Password: </b>Password1!</p>

@if (_signInSuccessful == false)
{
    <EditForm Model="_userToSignIn" OnValidSubmit="SignInUser">
        <DataAnnotationsValidator/>

        <div class="form-group my-3">
            <label for="email">Email address</label>
            <InputText @bind-Value="_userToSignIn.EmailAddress" id="email" class="form-control"/>
            <ValidationMessage For="@(() => _userToSignIn.EmailAddress)"/>
        </div>

        <div class="form-group my-3">
            <label for="password">Password</label>
            <InputText @bind-Value="_userToSignIn.Password" type="password" id="password" class="form-control"/>
            <ValidationMessage For="@(() => _userToSignIn.Password)"/>
        </div>

        <ValidationSummary/>

        <button type="submit" class="btn btn-primary btn-lg">Sign In</button>

        @if (_attemptToSignInFailed)
        {
            <p class="my-3 text-danger">Sing in failed. Please check your username/password and try again</p>
        }
    </EditForm>
}
else
{
    <h4>Sign in successful!</h4>
}

@code {

    [Inject]
    HttpClient HttpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private readonly UserDto _userToSignIn = new();
    private bool _signInSuccessful;
    private bool _attemptToSignInFailed;

    private async Task SignInUser()
    {
        _attemptToSignInFailed = false;

        var httpResponseMessage = await HttpClient.PostAsJsonAsync(APIEndpoints.s_signIn, _userToSignIn);

        if (httpResponseMessage.IsSuccessStatusCode)
        {
            var jsonWebToken = await httpResponseMessage.Content.ReadAsStringAsync();

            await LocalStorageService.SetItemAsync("bearerToken", jsonWebToken);

            await ((AppAuthenticationStateProvider) AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", jsonWebToken);

            _signInSuccessful = true;
        }
        else
        {
            _attemptToSignInFailed = true;
        }
    }

}